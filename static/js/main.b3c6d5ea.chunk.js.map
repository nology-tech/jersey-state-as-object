{"version":3,"sources":["logo.svg","components/Button/Button.jsx","components/ProgressBar/ProgressBar.jsx","components/ProgressWheel/ProgressWheel.jsx","containers/Progress/Progress.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Button","props","text","buttonType","borderButton","clicked","buttonStyle","push","onClick","className","join","ProgressBar","count","handleIncrement","handleDecrement","progressBy","handleChange","inlineStyles","width","style","type","value","onChange","ProgressWheel","widthPercent","background","Progress","useState","progressData","setProgressData","sum","progressTo","event","userInput","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAAe,I,8CCmBAA,EAhBA,SAACC,GACd,IAAQC,EAA4CD,EAA5CC,KAAMC,EAAsCF,EAAtCE,WAAYC,EAA0BH,EAA1BG,aAAcC,EAAYJ,EAAZI,QAElCC,EAAc,CAAC,UAMrB,OAJIH,GAAYG,EAAYC,KAAKJ,GAE7BC,GAAcE,EAAYC,KAAK,iBAGjC,wBAAQC,QAASH,EAASI,UAAWH,EAAYI,KAAK,KAAtD,SACGR,GAAQ,YCUAS,EApBK,SAAAV,GAClB,IAAQW,EAAsEX,EAAtEW,MAAOC,EAA+DZ,EAA/DY,gBAAiBC,EAA8Cb,EAA9Ca,gBAAiBC,EAA6Bd,EAA7Bc,WAAYC,EAAiBf,EAAjBe,aAGvDC,EAAe,CAAEC,MADL,UAAMN,EAAN,MAGlB,OACE,0BAASH,UAAU,eAAnB,UACE,mBAAGA,UAAU,wBAAb,SAAsCG,IACtC,qBAAKH,UAAU,0BAAf,SACE,qBAAKA,UAAU,0BAA0BU,MAAOF,MAElD,sBAAKR,UAAU,uBAAf,UACE,cAAC,EAAD,CAAQP,KAAK,IAAIG,QAASS,EAAiBV,aAAa,OAAOD,WAAW,cAC1E,uBAAOM,UAAU,sBAAsBW,KAAK,SAASC,MAAON,EAAYO,SAAUN,IAClF,cAAC,EAAD,CAAQd,KAAK,IAAIG,QAASQ,EAAiBT,cAAc,WCRlDmB,G,MATO,SAAAtB,GACpB,IAAQW,EAAUX,EAAVW,MACFY,EAAY,UAAMZ,EAAN,KAEZK,EAAe,CACnBQ,WAAW,0BAAD,OAA4BD,EAA5B,mBAAmDA,EAAnD,OAEZ,OAAO,qBAAKf,UAAU,iBAAiBU,MAAOF,MCgCjCS,EAnCE,WACf,IACA,EAAwCC,mBADnB,CAAEf,MAAO,EAAGG,WAAY,KAC7C,mBAAOa,EAAP,KAAqBC,EAArB,KACQjB,EAAsBgB,EAAtBhB,MAAOG,EAAea,EAAfb,WAmBf,OACE,sBAAKN,UAAU,WAAf,UACE,cAAC,EAAD,CACEG,MAAOA,EACPG,WAAYA,EACZD,gBAhBkB,WACtB,IAAMgB,EAAMlB,EAAQG,EACdgB,EAAaD,EAAM,EAAIA,EAAM,EACnCD,EAAgB,2BAAKD,GAAN,IAAoBhB,MAAOmB,MActClB,gBAvBkB,WACtB,IAAMiB,EAAMlB,EAAQG,EACdgB,EAAaD,EAAM,IAAMA,EAAM,IACrCD,EAAgB,2BAAKD,GAAN,IAAoBhB,MAAOmB,MAqBtCf,aAZe,SAAAgB,GACnB,IAAMC,GAAaD,EAAME,OAAOb,MAChCQ,EAAgB,2BAAKD,GAAN,IAAoBb,WAAYkB,QAY7C,cAAC,EAAD,CAAerB,MAAOA,QCxBbuB,EATH,WACV,OACE,sBAAK1B,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,gCACA,cAAC,EAAD,QCIS2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b3c6d5ea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport  \"./Button.scss\";\n\nconst Button = (props) => {\n  const { text, buttonType, borderButton, clicked } = props;\n\n  const buttonStyle = [\"button\"];\n\n  if (buttonType) buttonStyle.push(buttonType);\n\n  if (borderButton) buttonStyle.push(\"border-button\");\n\n  return (\n    <button onClick={clicked} className={buttonStyle.join(\" \")}>\n      {text || \"submit\"}\n    </button>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\nimport \"./ProgressBar.scss\";\n\nimport Button from \"../Button/Button\";\nconst ProgressBar = props => {\n  const { count, handleIncrement, handleDecrement, progressBy, handleChange } = props;\n\n  const widthPercent = `${count}%`;\n  const inlineStyles = { width: widthPercent };\n\n  return (\n    <section className=\"progress-bar\">\n      <p className=\"progress-bar__display\">{count}</p>\n      <div className=\"progress-bar__outer-bar\">\n        <div className=\"progress-bar__inner-bar\" style={inlineStyles}></div>\n      </div>\n      <div className=\"progress-bar__inputs\">\n        <Button text=\"-\" clicked={handleDecrement} borderButton=\"true\" buttonType=\"secondary\" />\n        <input className=\"progress-bar__input\" type=\"number\" value={progressBy} onChange={handleChange} />\n        <Button text=\"+\" clicked={handleIncrement} borderButton={true} />\n      </div>\n    </section>\n  );\n};\nexport default ProgressBar;\n","import React from \"react\";\nimport \"./ProgressWheel.scss\";\nconst ProgressWheel = props => {\n  const { count } = props;\n  const widthPercent = `${count}%`;\n\n  const inlineStyles = {\n    background: `conic-gradient(#00a8ff ${widthPercent}, white ${widthPercent} )`,\n  };\n  return <div className=\"progress-wheel\" style={inlineStyles}></div>;\n};\nexport default ProgressWheel;\n","import React, { useState } from \"react\";\nimport \"./Progress.scss\";\n\nimport ProgressBar from \"../../components/ProgressBar/ProgressBar\";\nimport ProgressWheel from \"../../components/ProgressWheel/ProgressWheel\";\n\nconst Progress = () => {\n  const defaultState = { count: 0, progressBy: 10 };\n  const [progressData, setProgressData] = useState(defaultState);\n  const { count, progressBy } = progressData;\n\n  const handleIncrement = () => {\n    const sum = count + progressBy;\n    const progressTo = sum < 100 ? sum : 100;\n    setProgressData({ ...progressData, count: progressTo });\n  };\n\n  const handleDecrement = () => {\n    const sum = count - progressBy;\n    const progressTo = sum > 0 ? sum : 0;\n    setProgressData({ ...progressData, count: progressTo });\n  };\n\n  const handleChange = event => {\n    const userInput = +event.target.value;\n    setProgressData({ ...progressData, progressBy: userInput });\n  };\n\n  return (\n    <div className=\"progress\">\n      <ProgressBar\n        count={count}\n        progressBy={progressBy}\n        handleDecrement={handleDecrement}\n        handleIncrement={handleIncrement}\n        handleChange={handleChange}\n      />\n      <ProgressWheel count={count} />\n    </div>\n  );\n};\nexport default Progress;\n","import logo from \"./logo.svg\";\nimport \"./App.scss\";\nimport Progress from \"./containers/Progress/Progress\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__title\">State as an object</h1>\n      <Progress />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}